################################################################################
###                                                                          ###
### Created by Alexandre Daby-Seesaram                                       ###
###                                                                          ###
### Ã‰cole Polytechnique, Palaiseau, France                                   ###
###                                                                          ###
################################################################################

name: Build and Deploy Jupyter Book

on:
  push:
    branches:
      - main
  
jobs:
    build_jupyterbook:
        runs-on: ubuntu-latest

        steps:
            # Checkout the code from the repository
            - name: Checkout code
              uses: actions/checkout@v3
      
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                python-version: '3.12'


            - name: Install and build Jupyter Book
              run: |
                pip install -U jupyter-book
                jupyter-book clean .
                jupyter-book build .
    
            # Save the build output as artifacts (to be reused in deploy stage)
            - name: Upload Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: jupyter-book-build
                path: _build/html/

    # Job to deploy the Jupyter Book (only if on the main branch)
    deploy:
        runs-on: ubuntu-latest
        needs: build_jupyterbook
        if: github.ref == 'refs/heads/main'

        permissions:
            pages: write
            id-token: write

        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}

        steps:
            # Checkout the code from the repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Download the build artifacts from the previous job
            - name: Download Build Artifacts
              uses: actions/download-artifact@v4
              with:
                name: jupyter-book-build
                path: './jupyter-book-build/'

            - name: Configure Pages
              uses: actions/configure-pages@v5

            - name: Debug
              run: |
                pwd
                ls -ltr

            - name: Upload artifact
              uses: actions/upload-pages-artifact@v3
              with:
            # Upload entire repository
                path: './jupyter-book-build/'
                
            # Deploy to GitHub Pages
            - name: Deploy to GitHub Pages
              id: deployment
              uses: actions/deploy-pages@v4
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




    build_docker_image:
        runs-on: ubuntu-20.04
        permissions:
            contents: read
            packages: write
        steps:
        # Checkout the repository
        - name: Checkout code
          uses: actions/checkout@v3

        # Set up Docker Buildx (for advanced Docker features)
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2

        # Install dependencies
        - name: Install dependencies
          run: |
            sudo apt update
            sudo apt install -y python3 python3-pip mercurial git ca-certificates curl gnupg lsb-release

        # Set up Docker repository
        - name: Setup Docker repository
          run: |
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo DEBIAN_FRONTEND=noninteractive apt install -y tzdata
            sudo apt update
            sudo apt install -y docker-ce docker-ce-cli containerd.io


        # Convert repository name to lowercase
        - name: Convert repository name to lowercase
          id: repo_name_lowercase
          run: |
            echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')"
            echo "REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
            echo $REPO_NAME
            cat $GITHUB_ENV

        # Display Docker images
        - name: Show Docker images
          run: docker images

        # Remove existing images (if any)
        - name: Remove existing images
          run: |
            docker rmi -f ghcr.io/$REPO_NAME || true
            docker images --filter="reference=ghcr.io/$REPO_NAME" --format="{{.Repository}}:{{.Tag}}" | xargs docker rmi || true
            docker image prune -f

        # Install jupyter-repo2docker
        - name: Install jupyter-repo2docker
          run: python3 -m pip install jupyter-repo2docker

        # Build the Docker image using repo2docker
        - name: Build Docker image
          run: repo2docker --no-run --user-id 1000 --user-name jovyan --image-name ghcr.io/$REPO_NAME .repo2docker

        # Tag the Docker image
        - name: Tag Docker image
          run: docker image tag ghcr.io/$REPO_NAME ghcr.io/$REPO_NAME:${{ github.sha }}

        # Login to GHCR
        - name: Log in to GHCR
          uses: docker/login-action@v2
          with:
            registry: ghcr.io
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

        # Push Docker images to GHCR
        - name: Push Docker image to GHCR
          run: |
            docker push ghcr.io/$REPO_NAME
            docker push ghcr.io/$REPO_NAME:${{ github.sha }}

        # Log out from GHCR
        - name: Log out from GHCR
          run: docker logout ghcr.io